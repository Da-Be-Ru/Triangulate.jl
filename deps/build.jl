using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libtriangle"], :libtriangle),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeometry/TriangleBuilder/releases/download/v0.1.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.aarch64-linux-gnu.tar.gz", "b3b4290e25e636e05856fd08ae30a581b00378e6d445ed7c06c37a2e94b66163"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.aarch64-linux-musl.tar.gz", "d5b00a1260ea6ddb93184a52a62a5f1d1faf3f1dc07b0acff621d9da95d3608c"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Triangle.v1.6.0.arm-linux-gnueabihf.tar.gz", "a424d5559424693461f9b5939f7ab628653695c41092f82edf2153aaebc6753f"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Triangle.v1.6.0.arm-linux-musleabihf.tar.gz", "e59633ecdf251ead9b8af3d5671beae340f2d54d67b4659e6cbd9e70f39cfc4e"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.i686-linux-gnu.tar.gz", "766c218318f49dccbb38bfdc4649ee97b0c9f790a3031e468ebac821198b46d8"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.i686-linux-musl.tar.gz", "c870296fe04b8014508c1d96a54fca0c50331778f715aae8f44060001d07a593"),
    Windows(:i686) => ("$bin_prefix/Triangle.v1.6.0.i686-w64-mingw32.tar.gz", "1c4d44212b663b83b0077493b1e2a7ce0ffb55b345e3b0ce29e46a7815027918"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.powerpc64le-linux-gnu.tar.gz", "872a850d17c31e42a07f8f0d345fa2bd8fb6e9649a10a379fbe59cc9df4b16cf"),
    MacOS(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-apple-darwin14.tar.gz", "f488df0558d97df88d36f20dac46ab37e57ce445432432380f00484869fa79c6"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.x86_64-linux-gnu.tar.gz", "70fff3ebc0ff36e1bf2428e280a7883874327ac52f066a2e1a6987bc0e4fa674"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.x86_64-linux-musl.tar.gz", "3e119fd608a29c2277ac9d142f9062fa25d9648661c1f4a2dcfcb95b62486816"),
    FreeBSD(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-unknown-freebsd11.1.tar.gz", "9b269cde463b86911969aa7e5895b08f9b256b25b867a37cc28bb4c73c499d2e"),
    Windows(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-w64-mingw32.tar.gz", "6fb7778b12ff813fb3ad1436a44e453938967782e20f94e2d9135d48b56429d8"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
