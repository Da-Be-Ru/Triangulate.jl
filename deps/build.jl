using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libtriangle"], :libtriangle),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Triangle_jll.jl/releases/download/Triangle-v1.6.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.aarch64-linux-gnu.tar.gz", "42ed084f481bbe753ba7b4d9b2ff94a18729f10b8964e16430ed8ea53fdbf041"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.aarch64-linux-musl.tar.gz", "438f155087524cfd9f50db48ebd24e7ddc789b981be10563bed7d51bc37e3e16"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Triangle.v1.6.0.armv7l-linux-gnueabihf.tar.gz", "7b5359cd8ecda0434b68919ab730ef3990f9322b460f338410a16fb6f85d369c"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Triangle.v1.6.0.armv7l-linux-musleabihf.tar.gz", "6f6f07f6f296b788dd0810e8c8c43b19209b1f47ebbb5e357ab238dc7b83cdad"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.i686-linux-gnu.tar.gz", "2c0ce7a2935f7a0793b2c29507378f23d6b028b0e9fbf9ed9e2f389f82fe4517"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.i686-linux-musl.tar.gz", "39669432999f959739898a4c9bcfb8741e2fe1fa4b370b085196bdcdab70f6d1"),
    Windows(:i686) => ("$bin_prefix/Triangle.v1.6.0.i686-w64-mingw32.tar.gz", "8288c6f0b424f0faeb05518a2b155c9a568ed6c49e1ed56f6d7b70240ca4c69f"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.powerpc64le-linux-gnu.tar.gz", "53f100a2dc03bf6a6e574e98b2fb0acec2ac39917c17c4ad7aff7716f065768e"),
    MacOS(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-apple-darwin14.tar.gz", "7cd63acd8823e3a1deb62ca8b19a7af924c983cd58e2ac63f30b66ed8f915d51"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.x86_64-linux-gnu.tar.gz", "e0ade9c2f4285e4a0f1089bb824086e891fee136f6b3913c07ddb0a06ee8153c"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.x86_64-linux-musl.tar.gz", "a3f061e37a3623fd7f68f54fd7af104f8ddc5b6c927107a99512f2c6ada742d4"),
    FreeBSD(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-unknown-freebsd11.1.tar.gz", "c8bff17951746f79874f7151018c50da614bdf7c1dff2c93e88e45c6e8c2866e"),
    Windows(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-w64-mingw32.tar.gz", "759396924a60f13462432ed4d6d94b4656b8eadecf64e519d47c5cca9b0ef66e"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
