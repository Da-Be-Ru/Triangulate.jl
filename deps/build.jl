using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libtriangle"], :libtriangle),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeometry/TriangleBuilder/releases/download/v0.3.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.aarch64-linux-gnu.tar.gz", "d019bcc421297d1c7c64e192ff3000efd360c2c8f83da129ead698225cd4e900"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.aarch64-linux-musl.tar.gz", "f4c935696068bceaf6c60091c984868ffca8dd5e7f49864e57c23f8cbd5aa579"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Triangle.v1.6.0.arm-linux-gnueabihf.tar.gz", "42f33d98df5db239fb3ea45d1570eb8c3970c3e616534c8eca28a34151fd095a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Triangle.v1.6.0.arm-linux-musleabihf.tar.gz", "6d829eddbc385e3d2e43a5a9f7949e12e1c4e3bb628fe14685549ad40691241c"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.i686-linux-gnu.tar.gz", "2d3fc5d3fa54e66e048152b8db26c6050b892546d15ff9dc4cd86eb8539b97b4"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.i686-linux-musl.tar.gz", "8cc12e2a051a8e4b75ade225b0a94b83908b807bba45dd2be4d0caf866b27496"),
    Windows(:i686) => ("$bin_prefix/Triangle.v1.6.0.i686-w64-mingw32.tar.gz", "6505b0e9d9d5d4c98d51387dbc8907630037062372a65e909544aca94be55020"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.powerpc64le-linux-gnu.tar.gz", "90ce4c74af9cfff0187ab420fdb0ccbfb865bf694ab358df738693d37eadf2ee"),
    MacOS(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-apple-darwin14.tar.gz", "9820e59f67befcf4a3083a8b85ac099a874b18bea69703cc6085254a3323f13a"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.x86_64-linux-gnu.tar.gz", "8be52b71ea46bde1edfbfc6f4865b0984f57f82d05deb454d4345ba640b14406"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.x86_64-linux-musl.tar.gz", "a60a26bd4d432a7aa0f7979a719d2ceac5e9d39410b8a43439348a38f3cc1040"),
    FreeBSD(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-unknown-freebsd11.1.tar.gz", "397b0333e471411fca3dccefe86d6f8dd1ee26e6867d7f9696b7c45720f19949"),
    Windows(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-w64-mingw32.tar.gz", "c9b1dda280b88dba4f436a45964c18e99224ab9f6a177d36c8d5640c95a07d86"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
