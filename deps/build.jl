using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libtriangle"], :libtriangle),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeometry/TriangleBuilder/releases/download/v0.2.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.aarch64-linux-gnu.tar.gz", "e9f523d68a4c947cb8be6270eca17bfa2417acf6a6620d65a494fc76299b36a9"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.aarch64-linux-musl.tar.gz", "c0db82130aaa8e3113c05d284eda130c3654b0dd7e3c6b1ceb8c827b218935da"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Triangle.v1.6.0.arm-linux-gnueabihf.tar.gz", "b11169625b2ad3eb9eeb310e92965f39d6996e3e351e7360b42536c8e4af1216"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Triangle.v1.6.0.arm-linux-musleabihf.tar.gz", "a1f1dc3e19de092f3ce2271c03d7a1826a94307c01cbd15ea7ffc17e084d3a3a"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.i686-linux-gnu.tar.gz", "c324b6f8fec2e987c53aacdfd1ffceb488eb2b0d424a831eee3df95779fb2212"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.i686-linux-musl.tar.gz", "8fbcfc73e260a5a2185db2cda3991990dc98f166056bffdde46471958d195b17"),
    Windows(:i686) => ("$bin_prefix/Triangle.v1.6.0.i686-w64-mingw32.tar.gz", "6166d8a0209cefa97a5e9ca1d5dc800ae92d1051242fff5f8f9bfa13051f60c3"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.powerpc64le-linux-gnu.tar.gz", "3f62c52ea0f08f0ea0aa6ce2b6cfda4dc509f614b67036025612ed6902e53066"),
    MacOS(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-apple-darwin14.tar.gz", "e767889f6592811aa75048d0a27ca7472db4083292f25de2b305e1ba86dee14a"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Triangle.v1.6.0.x86_64-linux-gnu.tar.gz", "9c0c65f9c23aad861a5709d2f3b130d3ab3ff3d69d1e41befd492b826796fc94"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Triangle.v1.6.0.x86_64-linux-musl.tar.gz", "05d4aa2e949b1b93d2523b52a5384745de34c3171e8ac31ca4bdfd2698ce2b74"),
    FreeBSD(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-unknown-freebsd11.1.tar.gz", "1ed9201c248c60daf85e1f516babedd3260a5ed976c6354ee4837f248b457031"),
    Windows(:x86_64) => ("$bin_prefix/Triangle.v1.6.0.x86_64-w64-mingw32.tar.gz", "f2fb515cb2e819d317875535168f82b17a9719f934c48657cb4aa7e89a5194e9"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
